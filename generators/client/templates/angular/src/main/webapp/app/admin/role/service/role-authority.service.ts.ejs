import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SERVER_API_URL } from 'app/app.constants';
import { IRoleAuthority } from 'app/shared/model/role-authority.model';

type EntityResponseType = HttpResponse<IRoleAuthority>;
type EntityArrayResponseType = HttpResponse<IRoleAuthority[]>;

@Injectable({ providedIn: 'root' })
export class RoleAuthorityService {
  public resourceUrl = SERVER_API_URL + 'api/role-authorities';

  constructor(protected http: HttpClient) {}

  getAuthoritiesDependencies(): Observable<HttpResponse<{ [_: string]: [] }>> {
    return this.http.get<{ [_: string]: [] }>(`${this.resourceUrl}/authorities-dependencies`, { observe: 'response' });
  }

  create(roleAuthority: IRoleAuthority): Observable<EntityResponseType> {
    return this.http.post<IRoleAuthority>(this.resourceUrl, roleAuthority, { observe: 'response' });
  }

  update(roleAuthority: IRoleAuthority): Observable<EntityResponseType> {
    return this.http.put<IRoleAuthority>(this.resourceUrl, roleAuthority, { observe: 'response' });
  }

  find(authority: string, roleName: string): Observable<EntityResponseType> {
    return this.http.get<IRoleAuthority>(`${this.resourceUrl}/authority=${authority};roleName=${roleName}`, { observe: 'response' });
  }

  query(req?: any): Observable<HttpResponse<string[]>> {
    return this.http.get<string[]>(`${this.resourceUrl}/${req}`, { observe: 'response' });
  }

  delete(authority: string, roleName: string): Observable<HttpResponse<any>> {
    return this.http.delete<any>(`${this.resourceUrl}/authority=${authority};roleName=${roleName}`, { observe: 'response' });
  }

  updateAuthorities(roleName: string, newAuthorities: string[]): Observable<HttpResponse<any>> {
    return this.http.put(`${this.resourceUrl}/${roleName}`, newAuthorities, { observe: 'response' });
  }
}
